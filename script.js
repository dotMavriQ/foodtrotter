document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.getElementById('wheelCanvas');
    const ctx = canvas.getContext('2d');
    const wheelRadius = canvas.width / 2;
    let segments = ['Africa', 'North America', 'South America', 'Asia', 'Europe', 'Oceania'];
    let currentSegments = segments;
    let spinAngleStart = 10;
    let startAngle = 0;
    let spinTime = 0;
    let spinTimeTotal = 0;

    const continentCountries = {
        'Africa': [
            'Algeria ğŸ‡©ğŸ‡¿', 'Angola ğŸ‡¦ğŸ‡´', 'Benin ğŸ‡§ğŸ‡¯', 'Botswana ğŸ‡§ğŸ‡¼', 'Burkina Faso ğŸ‡§ğŸ‡«', 'Burundi ğŸ‡§ğŸ‡®', 'Cabo Verde ğŸ‡¨ğŸ‡»', 'Cameroon ğŸ‡¨ğŸ‡²',
            'Central African Republic ğŸ‡¨ğŸ‡«', 'Chad ğŸ‡¹ğŸ‡©', 'Comoros ğŸ‡°ğŸ‡²', 'Congo, Democratic Republic of the ğŸ‡¨ğŸ‡©', 'Congo, Republic of the ğŸ‡¨ğŸ‡¬',
            'Djibouti ğŸ‡©ğŸ‡¯', 'Egypt ğŸ‡ªğŸ‡¬', 'Equatorial Guinea ğŸ‡¬ğŸ‡¶', 'Eritrea ğŸ‡ªğŸ‡·', 'Eswatini ğŸ‡¸ğŸ‡¿', 'Ethiopia ğŸ‡ªğŸ‡¹', 'Gabon ğŸ‡¬ğŸ‡¦', 'Gambia ğŸ‡¬ğŸ‡²',
            'Ghana ğŸ‡¬ğŸ‡­', 'Guinea ğŸ‡¬ğŸ‡³', 'Guinea-Bissau ğŸ‡¬ğŸ‡¼', 'Ivory Coast ğŸ‡¨ğŸ‡®', 'Kenya ğŸ‡°ğŸ‡ª', 'Lesotho ğŸ‡±ğŸ‡¸', 'Liberia ğŸ‡±ğŸ‡·', 'Libya ğŸ‡±ğŸ‡¾',
            'Madagascar ğŸ‡²ğŸ‡¬', 'Malawi ğŸ‡²ğŸ‡¼', 'Mali ğŸ‡²ğŸ‡±', 'Mauritania ğŸ‡²ğŸ‡·', 'Mauritius ğŸ‡²ğŸ‡º', 'Morocco ğŸ‡²ğŸ‡¦', 'Mozambique ğŸ‡²ğŸ‡¿', 'Namibia ğŸ‡³ğŸ‡¦',
            'Niger ğŸ‡³ğŸ‡ª', 'Nigeria ğŸ‡³ğŸ‡¬', 'Rwanda ğŸ‡·ğŸ‡¼', 'Sao Tome and Principe ğŸ‡¸ğŸ‡¹', 'Senegal ğŸ‡¸ğŸ‡³', 'Seychelles ğŸ‡¸ğŸ‡¨', 'Sierra Leone ğŸ‡¸ğŸ‡±',
            'Somalia ğŸ‡¸ğŸ‡´', 'South Africa ğŸ‡¿ğŸ‡¦', 'South Sudan ğŸ‡¸ğŸ‡¸', 'Sudan ğŸ‡¸ğŸ‡©', 'Tanzania ğŸ‡¹ğŸ‡¿', 'Togo ğŸ‡¹ğŸ‡¬', 'Tunisia ğŸ‡¹ğŸ‡³', 'Uganda ğŸ‡ºğŸ‡¬',
            'Zambia ğŸ‡¿ğŸ‡²', 'Zimbabwe ğŸ‡¿ğŸ‡¼'
        ],
        'Asia': [
            'Afghanistan ğŸ‡¦ğŸ‡«', 'Bahrain ğŸ‡§ğŸ‡­', 'Bangladesh ğŸ‡§ğŸ‡©', 'Bhutan ğŸ‡§ğŸ‡¹', 'Brunei ğŸ‡§ğŸ‡³', 'Burma (Myanmar) ğŸ‡²ğŸ‡²', 'Cambodia ğŸ‡°ğŸ‡­', 'China ğŸ‡¨ğŸ‡³',
            'East Timor ğŸ‡¹ğŸ‡±', 'India ğŸ‡®ğŸ‡³', 'Indonesia ğŸ‡®ğŸ‡©', 'Iran ğŸ‡®ğŸ‡·', 'Iraq ğŸ‡®ğŸ‡¶', 'Israel ğŸ‡®ğŸ‡±', 'Japan ğŸ‡¯ğŸ‡µ', 'Jordan ğŸ‡¯ğŸ‡´', 'Kazakhstan ğŸ‡°ğŸ‡¿',
            'North Korea ğŸ‡°ğŸ‡µ', 'South Korea ğŸ‡°ğŸ‡·', 'Kuwait ğŸ‡°ğŸ‡¼', 'Kyrgyzstan ğŸ‡°ğŸ‡¬', 'Laos ğŸ‡±ğŸ‡¦', 'Lebanon ğŸ‡±ğŸ‡§', 'Malaysia ğŸ‡²ğŸ‡¾', 'Maldives ğŸ‡²ğŸ‡»',
            'Mongolia ğŸ‡²ğŸ‡³', 'Nepal ğŸ‡³ğŸ‡µ', 'Oman ğŸ‡´ğŸ‡²', 'Pakistan ğŸ‡µğŸ‡°', 'Philippines ğŸ‡µğŸ‡­', 'Qatar ğŸ‡¶ğŸ‡¦', 'Russia ğŸ‡·ğŸ‡º', 'Saudi Arabia ğŸ‡¸ğŸ‡¦', 'Singapore ğŸ‡¸ğŸ‡¬',
            'Sri Lanka ğŸ‡±ğŸ‡°', 'Syria ğŸ‡¸ğŸ‡¾', 'Taiwan ğŸ‡¹ğŸ‡¼', 'Tajikistan ğŸ‡¹ğŸ‡¯', 'Thailand ğŸ‡¹ğŸ‡­', 'Turkey ğŸ‡¹ğŸ‡·', 'Turkmenistan ğŸ‡¹ğŸ‡²', 'United Arab Emirates ğŸ‡¦ğŸ‡ª',
            'Uzbekistan ğŸ‡ºğŸ‡¿', 'Vietnam ğŸ‡»ğŸ‡³', 'Yemen ğŸ‡¾ğŸ‡ª'
        ],
        'Europe': [
            'Albania ğŸ‡¦ğŸ‡±', 'Andorra ğŸ‡¦ğŸ‡©', 'Armenia ğŸ‡¦ğŸ‡²', 'Austria ğŸ‡¦ğŸ‡¹', 'Azerbaijan ğŸ‡¦ğŸ‡¿', 'Belarus ğŸ‡§ğŸ‡¾', 'Belgium ğŸ‡§ğŸ‡ª', 'Bosnia and Herzegovina ğŸ‡§ğŸ‡¦',
            'Bulgaria ğŸ‡§ğŸ‡¬', 'Croatia ğŸ‡­ğŸ‡·', 'Cyprus ğŸ‡¨ğŸ‡¾', 'Czech Republic ğŸ‡¨ğŸ‡¿', 'Denmark ğŸ‡©ğŸ‡°', 'Estonia ğŸ‡ªğŸ‡ª', 'Finland ğŸ‡«ğŸ‡®', 'France ğŸ‡«ğŸ‡·',
            'Georgia ğŸ‡¬ğŸ‡ª', 'Germany ğŸ‡©ğŸ‡ª', 'Greece ğŸ‡¬ğŸ‡·', 'Hungary ğŸ‡­ğŸ‡º', 'Iceland ğŸ‡®ğŸ‡¸', 'Ireland ğŸ‡®ğŸ‡ª', 'Italy ğŸ‡®ğŸ‡¹', 'Kazakhstan ğŸ‡°ğŸ‡¿', 'Kosovo ğŸ‡½ğŸ‡°',
            'Latvia ğŸ‡±ğŸ‡»', 'Liechtenstein ğŸ‡±ğŸ‡®', 'Lithuania ğŸ‡±ğŸ‡¹', 'Luxembourg ğŸ‡±ğŸ‡º', 'Malta ğŸ‡²ğŸ‡¹', 'Moldova ğŸ‡²ğŸ‡©', 'Monaco ğŸ‡²ğŸ‡¨', 'Montenegro ğŸ‡²ğŸ‡ª',
            'Netherlands ğŸ‡³ğŸ‡±', 'North Macedonia ğŸ‡²ğŸ‡°', 'Norway ğŸ‡³ğŸ‡´', 'Poland ğŸ‡µğŸ‡±', 'Portugal ğŸ‡µğŸ‡¹', 'Romania ğŸ‡·ğŸ‡´', 'Russia ğŸ‡·ğŸ‡º', 'San Marino ğŸ‡¸ğŸ‡²',
            'Serbia ğŸ‡·ğŸ‡¸', 'Slovakia ğŸ‡¸ğŸ‡°', 'Slovenia ğŸ‡¸ğŸ‡®', 'Spain ğŸ‡ªğŸ‡¸', 'Sweden ğŸ‡¸ğŸ‡ª', 'Switzerland ğŸ‡¨ğŸ‡­', 'Turkey ğŸ‡¹ğŸ‡·', 'Ukraine ğŸ‡ºğŸ‡¦',
            'United Kingdom ğŸ‡¬ğŸ‡§', 'Vatican City ğŸ‡»ğŸ‡¦'
        ],
        'North America': [
            'Antigua and Barbuda ğŸ‡¦ğŸ‡¬', 'Bahamas ğŸ‡§ğŸ‡¸', 'Barbados ğŸ‡§ğŸ‡§', 'Belize ğŸ‡§ğŸ‡¿', 'Canada ğŸ‡¨ğŸ‡¦', 'Costa Rica ğŸ‡¨ğŸ‡·', 'Cuba ğŸ‡¨ğŸ‡º', 'Dominica ğŸ‡©ğŸ‡²',
            'Dominican Republic ğŸ‡©ğŸ‡´', 'El Salvador ğŸ‡¸ğŸ‡»', 'Grenada ğŸ‡¬ğŸ‡©', 'Guatemala ğŸ‡¬ğŸ‡¹', 'Haiti ğŸ‡­ğŸ‡¹', 'Honduras ğŸ‡­ğŸ‡³', 'Jamaica ğŸ‡¯ğŸ‡²', 'Mexico ğŸ‡²ğŸ‡½',
            'Nicaragua ğŸ‡³ğŸ‡®', 'Panama ğŸ‡µğŸ‡¦', 'Saint Kitts and Nevis ğŸ‡°ğŸ‡³', 'Saint Lucia ğŸ‡±ğŸ‡¨', 'Saint Vincent and the Grenadines ğŸ‡»ğŸ‡¨',
            'Trinidad and Tobago ğŸ‡¹ğŸ‡¹', 'United States ğŸ‡ºğŸ‡¸'
        ],
        'Oceania': [
            'Australia ğŸ‡¦ğŸ‡º', 'Fiji ğŸ‡«ğŸ‡¯', 'Kiribati ğŸ‡°ğŸ‡®', 'Marshall Islands ğŸ‡²ğŸ‡­', 'Micronesia ğŸ‡«ğŸ‡²', 'Nauru ğŸ‡³ğŸ‡·', 'New Zealand ğŸ‡³ğŸ‡¿', 'Palau ğŸ‡µğŸ‡¼',
            'Papua New Guinea ğŸ‡µğŸ‡¬', 'Samoa ğŸ‡¼ğŸ‡¸', 'Solomon Islands ğŸ‡¸ğŸ‡§', 'Tonga ğŸ‡¹ğŸ‡´', 'Tuvalu ğŸ‡¹ğŸ‡»', 'Vanuatu ğŸ‡»ğŸ‡º'
        ],
        'South America': [
            'Argentina ğŸ‡¦ğŸ‡·', 'Bolivia ğŸ‡§ğŸ‡´', 'Brazil ğŸ‡§ğŸ‡·', 'Chile ğŸ‡¨ğŸ‡±', 'Colombia ğŸ‡¨ğŸ‡´', 'Ecuador ğŸ‡ªğŸ‡¨', 'Guyana ğŸ‡¬ğŸ‡¾', 'Paraguay ğŸ‡µğŸ‡¾',
            'Peru ğŸ‡µğŸ‡ª', 'Suriname ğŸ‡¸ğŸ‡·', 'Uruguay ğŸ‡ºğŸ‡¾', 'Venezuela ğŸ‡»ğŸ‡ª'
        ]
    };



    function drawSegmentLabel(ctx, text, angle, wheelRadius) {
        ctx.save();
        ctx.translate(wheelRadius, wheelRadius);
        ctx.rotate(angle);
        ctx.textAlign = "right";
        ctx.fillStyle = "#000";
        ctx.font = 'bold 14px "Helvetica Neue", Helvetica, Arial, sans-serif';
        ctx.fillText(text, wheelRadius - 10, 10);
        ctx.restore();
    }

    function drawWheel() {
        const anglePerSegment = 2 * Math.PI / currentSegments.length;
        let lastEndAngle = startAngle;

        // Clear the canvas for redraw
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        for (let i = 0; i < currentSegments.length; i++) {
            const segment = currentSegments[i];
            const angle = lastEndAngle + anglePerSegment;

            ctx.fillStyle = getSegmentColor(i, currentSegments.length);
            ctx.beginPath();
            ctx.moveTo(wheelRadius, wheelRadius);
            ctx.arc(wheelRadius, wheelRadius, wheelRadius, lastEndAngle, angle, false);
            ctx.lineTo(wheelRadius, wheelRadius);
            ctx.fill();

            drawSegmentLabel(ctx, segment, lastEndAngle + anglePerSegment / 2, wheelRadius);

            lastEndAngle = angle;
        }
    }

    function getSegmentColor(index, totalCount) {
        // Generate a random color with good contrast
        let hue = index * (360 / totalCount);
        hue = (hue + (index * 47)) % 360; // Shift the hue for each segment to ensure better contrast
        return `hsl(${hue}, 70%, 70%)`;
    }

    function spinWheel() {
        spinTime = 0;
        spinAngleStart = Math.random() * 10 + 20; // Make the start speed more variable
        spinTimeTotal = Math.random() * 3000 + 2000; // Vary the spin time more, between 2-5 seconds
        rotateWheel();
    }

    function rotateWheel() {
        spinTime += 30;
        if (spinTime >= spinTimeTotal) {
            stopRotateWheel();
            return;
        }
        // Use an easing function for a more dynamic deceleration curve
        const spinAngle = spinAngleStart - easeOut(spinTime, 0, spinAngleStart, spinTimeTotal);
        startAngle += (spinAngle * Math.PI / 180);
        drawWheel();
        requestAnimationFrame(rotateWheel);
    }

    function stopRotateWheel() {
        let degrees = startAngle * 180 / Math.PI;
        let arcd = 360 / currentSegments.length;
        let index = Math.floor((360 - (degrees % 360)) / arcd);
        ctx.save();
        alert(`You landed on: ${currentSegments[index]}`);
        ctx.restore();

        // Load the next wheel with countries if a continent is selected
        if (continentCountries[currentSegments[index]]) {
            updateWheel(continentCountries[currentSegments[index]]);
        }
    }

    function easeOut(t, b, c, d) {
        const ts = (t /= d) * t;
        const tc = ts * t;
        return b + c * (tc + -3 * ts + 3 * t);
    }

    function updateWheel(newSegments) {
        currentSegments = newSegments;
        startAngle = 0; // Reset start angle for the new wheel
        drawWheel();
    }

    canvas.addEventListener('click', spinWheel);

    // Initial drawing of the wheel.
    drawWheel();
});
